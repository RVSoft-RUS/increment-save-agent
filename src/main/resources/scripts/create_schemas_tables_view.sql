CREATE SCHEMA IF NOT EXISTS raw_data_increment;

CREATE TABLE IF NOT EXISTS raw_data.increment_states
(
    incr_pack_run_id     bigint generated by default as identity
        constraint increment_states_pkey primary key,
    package_smd          varchar(50),
    subscr_id            varchar(50),
    obj_type             varchar(20),
    objs_in_pack         integer,
    workflow_end_dt      timestamp,
    start_dt             timestamp,
    end_dt               timestamp,
    target_table         varchar(50),
    min_ctl_loading      bigint,
    max_ctl_loading      bigint,
    incrementation_state integer
);

CREATE TABLE IF NOT EXISTS raw_data_increment.espd_mat
(
    package_smd       varchar(50)   NULL,
    subscr_id         varchar(128)  NULL,
    package_smd_dt    timestamp     NULL,
    workflow_run_id   int8          NULL,
    workflow_name     varchar(128)  NULL,
    workflow_status   varchar(4000) NULL,
    workflow_start_dt timestamp     NULL,
    workflow_end_dt   timestamp     NULL,
    espd_status       varchar(20)   NULL,
    espd_err_text     text          NULL,
    is_partitioned    int4          NULL,
    objs              int4          NULL,
    objs_err          int4          NULL
);

CREATE TABLE IF NOT EXISTS raw_data_increment.espd_mat_obj
(
    package_smd          varchar(50)   NULL,
    mater_id             varchar(50)   NULL,
    status_smd           varchar(50)   NULL,
    obj_id               int4          NULL,
    mater_tgt_state      varchar(50)   NULL,
    mater_tgt_date       timestamp     NULL,
    workflow_run_id      int8          NULL,
    src_creationdt       timestamp     NULL,
    src_expirationdt     timestamp     NULL,
    src_plannedstartdt   timestamp     NULL,
    src_real_scheme      varchar(200)  NULL,
    src_real_table       varchar(200)  NULL,
    mater_tgt_last_error varchar(4000) NULL,
    subscr_id            varchar(50)   NULL,
    to_ignore            int4          NULL
);

CREATE TABLE IF NOT EXISTS raw_data.espd_mat
(
    package_smd       varchar(50)   NULL,
    subscr_id         varchar(128)  NULL,
    package_smd_dt    timestamp     NULL,
    workflow_run_id   int8          NULL,
    workflow_name     varchar(128)  NULL,
    workflow_status   varchar(4000) NULL,
    workflow_start_dt timestamp     NULL,
    workflow_end_dt   timestamp     NULL,
    espd_status       varchar(20)   NULL,
    espd_err_text     text          NULL,
    is_partitioned    int4          NULL,
    objs              int4          NULL,
    objs_err          int4          NULL
);

CREATE TABLE IF NOT EXISTS raw_data.espd_mat_obj
(
    package_smd          varchar(50)   NULL,
    mater_id             varchar(50)   NULL,
    status_smd           varchar(50)   NULL,
    obj_id               int4          NULL,
    mater_tgt_state      varchar(50)   NULL,
    mater_tgt_date       timestamp     NULL,
    workflow_run_id      int8          NULL,
    src_creationdt       timestamp     NULL,
    src_expirationdt     timestamp     NULL,
    src_plannedstartdt   timestamp     NULL,
    src_real_scheme      varchar(200)  NULL,
    src_real_table       varchar(200)  NULL,
    mater_tgt_last_error varchar(4000) NULL,
    subscr_id            varchar(50)   NULL,
    to_ignore            int4          NULL
);


CREATE TABLE IF NOT EXISTS raw_data_increment.cx_txb_log_stat
(
    PREV_STATUS      varchar(4000),
    CONFLICT_ID      varchar(4000),
    WAIT             varchar(4000),
    LAST_UPD         timestamp(6),
    CREATED_BY       varchar(4000),
    CURR_STATUS      varchar(4000),
    CTL_LOADING      bigint,
    ROW_ID           varchar(4000) not null,
    CTL_VALIDFROM    timestamp(6),
    DB_LAST_UPD      timestamp(6),
    CREATED          timestamp(6),
    ACTION_ID        varchar(4000),
    DB_LAST_UPD_SRC  varchar(4000),
    CTL_CSN          numeric(38, 0),
    MODIFICATION_NUM numeric(10, 0),
    CHANGE_DT        timestamp(6),
    CTL_ACTION       varchar(4000),
    LAST_UPD_BY      varchar(4000)
);

CREATE TABLE IF NOT EXISTS raw_data_increment.cx_txb_schedule
(
    LAST_UPD_BY      varchar(4000),
    BREAK_START      numeric(4, 0),
    BREAK2_END       numeric(4, 0),
    CTL_ACTION       varchar(4000),
    LAST_UPD         timestamp(6),
    SHIFT_DATE       timestamp(6),
    CONFLICT_ID      varchar(4000),
    CREATED_BY       varchar(4000),
    SHIFT_NAME       varchar(4000),
    CTL_VALIDFROM    timestamp(6),
    BREAK_END        numeric(4, 0),
    SHIFT_END        numeric(4, 0),
    CREATED          timestamp(6),
    CTL_LOADING      bigint,
    ROW_ID           varchar(4000) not null,
    CTL_CSN          numeric(38, 0),
    DB_LAST_UPD_SRC  varchar(4000),
    BREAK2_START     numeric(4, 0),
    DB_LAST_UPD      timestamp(6),
    PAR_ROW_ID       varchar(4000),
    MODIFICATION_NUM numeric(10, 0),
    SHIFT_START      numeric(4, 0)
);

CREATE TABLE IF NOT EXISTS raw_data.primary_key_helper
(
    table_name varchar(50) not null
        constraint primary_key_helper_pkey
            primary key,
    p_keys     varchar(1000)
);

CREATE OR REPLACE VIEW raw_data_increment.ESPD_READY_TO_RECEIVE AS

SELECT CASE (sum_mat = sum_incr AND READY1 = 1) WHEN true THEN 1 ELSE 0 END AS READY
FROM (
         SELECT (SELECT count(*)
                 FROM raw_data_increment.espd_mat
                 WHERE espd_status = 'ESPD_OK')
                                                            as sum_mat,
                (SELECT count(distinct package_smd)
                 FROM raw_data.increment_states
                 WHERE obj_type = 'PACKAGE'
                   AND incrementation_state = 100)
                                                            as sum_incr,
                CASE (alls - good) WHEN 0 THEN 1 ELSE 0 END AS READY1
         FROM (
                  SELECT count(*) AS alls, COALESCE(sum(incrementation_state) / 100, 0) AS good
                  FROM raw_data.increment_states i
                           JOIN raw_data_increment.espd_mat e
                                ON (i.package_smd = e.package_smd)
                  WHERE espd_status = 'ESPD_OK'
                    AND incrementation_state = 100
                    AND obj_type = 'PACKAGE') as w
     ) as T;
-- должна выполнять логику сравнения пакетов в espd_mat и  increment_states определять,
-- что все пакеты загруженные и отмеченные в espd_mat атрибутом "ESPD_OK",
-- успешно обработаны агентом обновления данных и имеют соответствующий статус
-- обработки пакета = "100" в increment_states. В таком случае вьюха должна
-- возвращать значение 1 иначе 0.

